{"version":3,"sources":["bubble_chart.js","App.js","serviceWorker.js","index.js"],"names":["document","documentElement","clientWidth","clientHeight","bubbleChart","width","height","tierPad","center","x","y","tierScale","d3","domain","range","tierLevels","twoThouToLimitAmount","text","oneThouTo2000Amount","fiveHundredTo1000Amount","twoHundredTo500Amount","fiftyTo200Amount","zeroTo50Amount","Object","keys","forEach","k","i","candidates","Bernie Sanders","Hillary Clinton","Martin O'Malley","forceStrength","svg","bubbles","nodes","charge","d","Math","pow","radius","fillColor","simulation","sim","velocityDecay","force","strength","on","ticked","stop","simulationFactory","attr","groupBubbles","xPos","hideTierLabels","alpha","restart","splitBubbles","tierLabels","tierTitle","selectAll","data","tierX","enter","append","key","showTierLabels","tier","name","remove","chart","selector","rawData","maxAmount","size","radiusScale","myNodes","map","id","random","sort","a","b","createNodes","bubblesE","classed","darker","merge","transition","duration","candidateTitleData","toggleDisplay","displayName","Container","styled","div","_templateObject","_ref","Toolbar","_templateObject2","_ref2","App","state","windowWidth","windowHeight","this","setState","_this$state","mychart","min","primaryDATA","button","buttonId","_this$state2","headerHeight","footerHeight","react_default","createElement","className","ref","vis","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cec5040.chunk.js","sourcesContent":["import * as d3 from \"d3\";\n\nconst windowWidth = document.documentElement.clientWidth;\nconst windowHeight = document.documentElement.clientHeight;\n/*\n * Code adapted from:\n * http://vallandingham.me/gates_bubbles/\n *\n */\n\nfunction bubbleChart(width, height) {\n  const tierPad = height * 0.2;\n\n  // Locations to move bubbles towards, depending\n  // on which view mode is selected.\n  const center = { x: width / 2, y: height / 2 };\n\n  const tierScale = d3\n    .scaleLinear()\n    .domain([0, 5])\n    .range([0, height - tierPad * 2]);\n\n  const tierLevels = {\n    twoThouToLimitAmount: {\n      text: \"$2k - $2,700 (limit)\"\n    },\n    oneThouTo2000Amount: {\n      text: \"$1k - $1999.99\"\n    },\n    fiveHundredTo1000Amount: {\n      text: \"$500 - 999.99\"\n    },\n    twoHundredTo500Amount: {\n      text: \"$200 - 499.99\"\n    },\n    fiftyTo200Amount: {\n      text: \"$50 - 199.99\"\n    },\n    zeroTo50Amount: {\n      text: \"$0 - 49.99\"\n    }\n  };\n\n  let tierLevelKeys = Object.keys(tierLevels);\n  tierLevelKeys.forEach((k, i) => {\n    tierLevels[k].y = tierScale(i) + tierPad;\n  });\n\n  const candidates = {\n    \"Bernie Sanders\": { x: center.x - width / 4 },\n    \"Hillary Clinton\": { x: center.x },\n    \"Martin O'Malley\": { x: center.x + width / 4 }\n  };\n\n  // @v4 strength to apply to the position forces\n  const forceStrength = 0.03;\n\n  // These will be set in create_nodes and create_vis\n  let svg = null;\n  let bubbles = null;\n  let nodes = [];\n\n  // Charge function that is called for each node.\n  // As part of the ManyBody force.\n  // This is what creates the repulsion between nodes.\n  //\n  // Charge is proportional to the diameter of the\n  // circle (which is stored in the radius attribute\n  // of the circle's associated data.\n  //\n  // This is done to allow for accurate collision\n  // detection with nodes of different sizes.\n  //\n  // Charge is negative because we want nodes to repel.\n  // @v4 Before the charge was a stand-alone attribute\n  //  of the force layout. Now we can use it as a separate force!\n  function charge(d) {\n    return -Math.pow(d.radius, 2) * forceStrength;\n  }\n\n  const fillColor = d3\n    .scaleOrdinal()\n    .domain([\"high\", \"medium\", \"low\"])\n    .range([\"#e7f7d4\", \"#a3bc85\", \"#5a823d\"]);\n\n  const simulationFactory = center => {\n    const sim = d3\n      .forceSimulation()\n      .velocityDecay(0.15)\n      .force(\n        \"x\",\n        d3\n          .forceX()\n          .strength(forceStrength)\n          .x(center.x)\n      )\n      .force(\"charge\", d3.forceManyBody().strength(charge))\n      .on(\"tick\", ticked);\n\n    // @v4 Force starts up automatically,\n    //  which we don't want as there aren't any nodes yet.\n    sim.stop();\n\n    return sim;\n  };\n\n  const simulation = simulationFactory(center);\n\n  /*\n   * This data manipulation function takes the raw data from\n   * the CSV file and converts it into an array of node objects.\n   * Each node will store data and visualization values to visualize\n   * a bubble.\n   *\n   * rawData is expected to be an array of data objects, read in from\n   * one of d3's loading functions like d3.csv.\n   *\n   * This function returns the new node array, with a node in that\n   * array for each element in the rawData input.\n   */\n  function createNodes(rawData) {\n    // Use the max amount in the data as the max in the scale's domain\n    // note we have to ensure the amount is a number.\n\n    const maxAmount = d3.max(rawData, function(d) {\n      return +d.size;\n    });\n\n    // Sizes bubbles based on area.\n    // @v4: new flattened scale names.\n    const radiusScale = d3\n      .scaleSqrt()\n      .domain([0, maxAmount])\n      .range([0, height * 0.016]);\n\n    // Use map() to convert raw data into node data.\n    // Checkout http://learnjsdata.com/ for more on\n    // working with data.\n    const myNodes = rawData.map(function(d) {\n      return {\n        id: d.id,\n        radius: radiusScale(+d.size),\n        name: d.name,\n        text: tierLevels[d.tier].text,\n        tier: d.tier,\n        x: Math.random() * 900,\n        y: Math.random() * 800\n      };\n    });\n\n    // sort them to prevent occlusion of smaller nodes.\n    myNodes.sort(function(a, b) {\n      return b.radius - a.radius;\n    });\n\n    return myNodes;\n  }\n\n  /*\n   * Callback function that is called after every tick of the\n   * force simulation.\n   * Here we do the acutal repositioning of the SVG circles\n   * based on the current x and y values of their bound node data.\n   * These x and y values are modified by the force simulation.\n   */\n  function ticked() {\n    bubbles\n      .attr(\"cx\", function(d) {\n        return d.x;\n      })\n      .attr(\"cy\", function(d) {\n        return d.y;\n      });\n  }\n\n  function groupBubbles(xPos) {\n    hideTierLabels();\n\n    simulation\n      .force(\n        \"y\",\n        d3\n          .forceY()\n          .strength(forceStrength)\n          .y(center.y)\n      )\n      .force(\n        \"x\",\n        d3\n          .forceX()\n          .strength(forceStrength)\n          .x(xPos)\n      );\n\n    // @v4 We can reset the alpha value and restart the simulation\n    simulation.alpha(1).restart();\n  }\n\n  function groupBubbles() {\n    hideTierLabels();\n\n    simulation.force(\n      \"y\",\n      d3\n        .forceY()\n        .strength(forceStrength)\n        .y(center.y)\n    );\n\n    // @v4 We can reset the alpha value and restart the simulation\n    simulation.alpha(1).restart();\n  }\n\n  function splitBubbles() {\n    showTierLabels();\n\n    simulation\n      .force(\n        \"y\",\n        d3\n          .forceY()\n          .strength(forceStrength)\n          .y(d => {\n            return tierLevels[d.tier].y;\n          })\n      )\n      .force(\n        \"x\",\n        d3\n          .forceX()\n          .strength(forceStrength)\n          .x(d => {\n            return candidates[d.name].x;\n          })\n      );\n\n    // @v4 We can reset the alpha value and restart the simulation\n    simulation.alpha(1).restart();\n  }\n\n  function hideTierLabels() {\n    svg.selectAll(\".tier-label\").remove();\n  }\n\n  function showTierLabels() {\n    const tierLabels = d3.keys(tierLevels);\n    const tierTitle = svg.selectAll(\".tier-label\").data(tierLabels);\n    const tierX = width * 0.15;\n\n    tierTitle\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"tier-label\")\n      .attr(\"y\", key => tierLevels[key].y)\n      .attr(\"x\", tierX)\n      .attr(\"text-anchor\", \"end\")\n      .text(d => tierLevels[d].text);\n  }\n\n  function toggleDisplay(displayName) {\n    if (displayName === \"donation_tiers\") {\n      splitBubbles();\n    } else {\n      groupBubbles();\n    }\n  }\n\n  /*\n   * Main entry point to the bubble chart. This function is returned\n   * by the parent closure. It prepares the rawData for visualization\n   * and adds an svg element to the provided selector and starts the\n   * visualization creation process.\n   *\n   * selector is expected to be a DOM element or CSS selector that\n   * points to the parent element of the bubble chart. Inside this\n   * element, the code will add the SVG continer for the visualization.\n   *\n   * rawData is expected to be an array of data objects as provided by\n   * a d3 loading function like d3.csv.\n   */\n  function chart(selector, rawData) {\n    // convert raw data into nodes data\n    nodes = createNodes(rawData);\n\n    // Create a SVG element inside the provided selector\n    // with desired size.\n    svg = d3\n      .select(selector)\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // Bind nodes data to what will become DOM elements to represent them.\n    bubbles = svg.selectAll(\".bubble\").data(nodes, function(d) {\n      return d.id;\n    });\n\n    // Create new circle elements each with class `bubble`.\n    // There will be one circle.bubble for each object in the nodes array.\n    // Initially, their radius (r attribute) will be 0.\n    // @v4 Selections are immutable, so lets capture the\n    //  enter selection to apply our transtition to below.\n    const bubblesE = bubbles\n      .enter()\n      .append(\"circle\")\n      .classed(\"bubble\", true)\n      .attr(\"r\", 0)\n      .attr(\"fill\", function(d) {\n        return fillColor(d.text);\n      })\n      .attr(\"stroke\", function(d) {\n        return d3.rgb(fillColor(d.text)).darker([3]);\n      })\n      .attr(\"stroke-width\", 0.5);\n\n    // @v4 Merge the original empty selection and the enter selection\n    bubbles = bubbles.merge(bubblesE);\n\n    // Fancy transition to make bubbles appear, ending with the\n    // correct radius\n    bubbles\n      .transition()\n      .duration(2000)\n      .attr(\"r\", function(d) {\n        return d.radius;\n      });\n\n    simulation.nodes(nodes);\n\n    // Add the candidate names\n    const candidateTitleData = Object.keys(candidates);\n    const candidateTitle = svg.selectAll(\".candidate\").data(candidateTitleData);\n\n    candidateTitle\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"candidate\")\n      .attr(\"x\", function(d) {\n        return candidates[d].x;\n      })\n      .attr(\"y\", 20)\n      .attr(\"text-anchor\", \"middle\")\n      .text(function(d) {\n        return d;\n      });\n\n    // Set initial layout to single group.\n    groupBubbles(center.x);\n  }\n\n  // return the chart function from closure.\n  return { chart, toggleDisplay };\n}\n\nfunction setupButtons(chart) {\n  d3.select(\"#toolbar\")\n    .selectAll(\".button\")\n    .on(\"click\", function() {\n      // Remove active class from all buttons\n      d3.selectAll(\".button\").classed(\"active\", false);\n      // Find the button just clicked\n      var button = d3.select(this);\n\n      // Set it as the active button\n      button.classed(\"active\", true);\n\n      // Get the id of the button\n      var buttonId = button.attr(\"id\");\n\n      // Toggle the bubble chart based on\n      // the currently clicked button.\n      chart.toggleDisplay(buttonId);\n    });\n}\n\nexport { bubbleChart, setupButtons };\n","import React, { Component } from \"react\";\nimport { bubbleChart, setupButtons } from \"./bubble_chart\";\nimport styled from \"@emotion/styled\";\nimport primaryDATA from \"./data/2016_primary_json\";\nimport { buildDataArray } from \"./dataBuilder\";\nimport \"./styles/bubble_chart.css\";\n\nconst Container = styled.div`\n  width: ${({ width }) => width};\n  max-width: var(--max-width);\n  margin: auto;\n`;\n\nconst Toolbar = styled.div`\n  height: ${({ height }) => height};\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  .header-main {\n    align-self: center;\n    color: #999;\n    width: 100%;\n    font-size: 28px;\n    text-align: right;\n    margin: 0 auto;\n    padding: 0 0.5em;\n    font-weight: 300;\n    max-width: var(--max-width);\n  }\n  @media (max-width: 768px) {\n    .header-main {\n      font-size: 16px;\n    }\n  }\n`;\n\nclass App extends Component {\n  state = {\n    windowWidth: 0,\n    windowHeight: 0\n  };\n\n  componentDidMount() {\n    this.setState({\n      windowWidth: document.documentElement.clientWidth,\n      windowHeight: document.documentElement.clientHeight\n    });\n\n    // const dataAray = buildDataArray();\n    // console.log(dataAray);\n    // console.log(JSON.stringify(dataAray));\n  }\n\n  componentDidUpdate() {\n    const { windowWidth, windowHeight } = this.state;\n    const width = Math.min(windowWidth, 1600);\n    const height = windowHeight > 375 ? windowHeight * 0.9 : windowHeight;\n    const mychart = bubbleChart(width, height);\n    mychart.chart(\"#vis\", primaryDATA);\n    setupButtons(mychart);\n  }\n\n  render() {\n    const { windowWidth, windowHeight } = this.state;\n    const headerHeight = windowHeight > 375 ? \"4vh\" : \"6vh\";\n    const footerHeight = windowHeight > 375 ? \"6vh\" : \"8vh\";\n\n    return (\n      <Container width={windowWidth}>\n        <Toolbar height={headerHeight}>\n          <h1 className=\"header-main\">Liberal Radicalism</h1>\n        </Toolbar>\n        <div id=\"vis\" ref={this.vis} />\n        <Toolbar id=\"toolbar\" height={footerHeight}>\n          <a href=\"#\" id=\"donation_all\" className=\"button active\">\n            All Donations\n          </a>\n          <a href=\"#\" id=\"donation_tiers\" className=\"button\">\n            Donations By Tier\n          </a>\n        </Toolbar>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}